name: Dashboard Deployment

on:
  push:
    branches:
      - main

# Prevent concurrent deployments
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Set environment variable
        run: echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: .next

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            # Navigate to app directory
            cd /var/www/dashboard

            # Stop and delete existing PM2 process to avoid duplicates
            pm2 stop dashboard || true
            pm2 delete dashboard || true

            # Remove old .next directory
            rm -rf .next

            # Create directory for artifacts
            mkdir -p .next

            # Copy artifacts (will be handled by download-artifact)
            echo "Ready to receive artifacts"

      - name: Download build artifacts to server
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: /var/www/dashboard/.next
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Finalize deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd /var/www/dashboard
            npm ci --production # Install only production dependencies
            pm2 start npm --name "dashboard" -- start
            pm2 save

            # Reload Nginx to apply any changes
            sudo systemctl reload nginx

            # Purge Akamai cache (requires Akamai CLI installed on server)
            akamai purge --url https://your-domain.com/* || echo "Akamai purge failed"

      - name: Verify deployment
        run: |
          sleep 10 # Wait for deployment to stabilize
          curl -f https://your-domain.com || exit 1
